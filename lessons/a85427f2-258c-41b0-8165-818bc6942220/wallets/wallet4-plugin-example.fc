;; Simple subscription plugin for wallet-v4
;; anyone can ask to send a subscription payment

(int) slice_data_equal?(slice s1, slice s2) asm "SDEQ";

int op:destruct() asm "0x64737472 PUSHINT";
int op:payment_request() asm "0x706c7567 PUSHINT";
int op:fallback() asm "0x756e6b77 PUSHINT";
int op:subscription() asm "0x73756273 PUSHINT";
int max_failed_attempts() asm "2 PUSHINT";
int max_reserved_funds() asm "67108864 PUSHINT"; ;; 0.0671 TON

int short_msg_fwd_fee(int workchain) inline {
  ;; tlb:
  ;; msg_forward_prices#ea lump_price:uint64 bit_price:uint64 cell_price:uint64
  ;;   ihr_price_factor:uint32 first_frac:uint16 next_frac:uint16 = MsgForwardPrices;
  ;;
  ;; config_fwd_prices#_ MsgForwardPrices = ConfigParam 25;
  ;; "Lump_price это базовая комса сообщения. Все остальнве компоненты (плата за биты, за ячейки итп) плюсуется к ней."
  ;; "чтобы было понятнее. Эта комса за root cell (потому что остальной forward fee считается без root cell)"
  int config_index = 25 + workchain;
  int lump_price = config_param(config_index).begin_parse().skip_bits(8).preload_uint(64);
  return lump_price;
}

int gas_to_coins(int workchain, int gas) inline_ref {
  ;; tlb:
  ;; config_gas_prices#_ GasLimitsPrices = ConfigParam 21;
  ;;
  ;; gas_flat_pfx#d1 flat_gas_limit:uint64 flat_gas_price:uint64 other:GasLimitsPrices = GasLimitsPrices;
  ;;
  ;; gas_prices#dd gas_price:uint64 gas_limit:uint64 gas_credit:uint64
  ;;   block_gas_limit:uint64 freeze_due_limit:uint64 delete_due_limit:uint64
  ;;   = GasLimitsPrices;
  ;;
  ;; gas_prices_ext#de gas_price:uint64 gas_limit:uint64 special_gas_limit:uint64 gas_credit:uint64
  ;;   block_gas_limit:uint64 freeze_due_limit:uint64 delete_due_limit:uint64
  ;;   = GasLimitsPrices;

  int config_index = 21 + workchain;
  var cs = config_param(config_index).begin_parse();
  if (cs.preload_uint(8) == 0xd1) { ;; gas_flat_pfx
    cs~skip_bits(8 + 64 + 64);
  }
  int tag = cs~load_uint(8);
  throw_unless(71, (tag == 0xdd) | (tag == 0xde)); ;; gas_prices or gas_prices_ext
  int gas_price = cs~load_uint(64);
  return (gas * gas_price) >> 16; ;; так как сейчас gas_price делиться на 2^16. gas_fees: G_F = 1000(gas_price) * N(gas consumed) / 2^16; (2^16 == 65536)
}

;; storage$_ wallet:MsgAddressInt - адрес подписчика
;;           beneficiary:MsgAddressInt - смарт контракт сервиса, который предоставляет услугу
;;           amount:Grams - цена за подписку
;;           ;; далее лежат данные о подписке
;;           period:uint32 start_time:uint32 timeout:uint32
;;           last_payment_time:uint32
;;           last_request_time:uint32
;;           failed_attempts:uint8
;;           subscription_id:uint32 = Storage;

(slice, slice, int, int, int, int, int, int, int, int) load_storage() impure inline_ref {
  var ds = get_data().begin_parse();
  return (ds~load_msg_addr(), ds~load_msg_addr(), ds~load_grams(),
          ds~load_uint(32), ds~load_uint(32), ds~load_uint(32),
          ds~load_uint(32), ds~load_uint(32), ds~load_uint(8), ds~load_uint(32));
}

() save_storage(slice wallet, slice beneficiary, int amount,
                int period, int start_time, int timeout, int last_payment_time,
                int last_request_time, int failed_attempts, int subscription_id) impure inline_ref {
  set_data(begin_cell()
    .store_slice(wallet)
    .store_slice(beneficiary)
    .store_grams(amount)
    .store_uint(period, 32)
    .store_uint(start_time, 32)
    .store_uint(timeout, 32)
    .store_uint(last_payment_time, 32)
    .store_uint(last_request_time, 32)
    .store_uint(failed_attempts, 8)
    .store_uint(subscription_id, 32) ;; to differ subscriptions to the same beneficiary (acts as a nonce)
  .end_cell());
}

() forward_funds(slice beneficiary, int self_destruct?, int op) impure inline_ref {
  if ~(self_destruct?) {
    ;; создаем action который сохранит максимум max_reserved_funds после отправки остальных action,
    ;; и не упадет, если не сможет их зарезервировать
    raw_reserve(max_reserved_funds(), 2); ;; резервируем максимум `max_reserved_funds` нанокоинов
  }
  var msg = begin_cell()
      .store_uint(0x10, 6) ;; non-bounce message
      .store_slice(beneficiary)
      .store_grams(0) ;; 0, так как mode 128
      .store_dict(pair_second(get_balance())) ;; extra currencies
      .store_uint(0, 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(op, 32);
  int mode = 128; ;; передаем весь баланс
  if (self_destruct?) { ;; если он не self_destruct? то мы оставим немного денег на смарте благодяра raw_reserve
    mode += 32; ;; удаляем смарт контракт после отправки
  }
  send_raw_message(msg.end_cell(), mode);
}

() request_payment(slice wallet, int requested_amount) impure inline_ref {
  ;; отправляем сообщение для запроса обновления подписки (оплаты след периода)
  (int wc, _) = wallet.parse_std_addr();
  int amount = gas_to_coins(wc, 15000) + short_msg_fwd_fee(wc); ;; отправляем столько газа для успешного выполнения транзакции

  var msg = begin_cell().store_uint(0x18, 6)
                        .store_slice(wallet)
                        .store_grams(amount)
                        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                        .store_uint(op:payment_request(), 32) ;; op
                        .store_uint(cur_lt(), 64) ;; query_id
                        .store_grams(requested_amount)
                        .store_uint(0, 1); ;; пустая extra_currencies
  send_raw_message(msg.end_cell(), 3);
}

() self_destruct(slice wallet, slice beneficiary) impure {
  ;; отправляем уведомление на wallet, который использует подписку
  (int wc, _) = wallet.parse_std_addr();
  int amount = gas_to_coins(wc, 10000);

  var msg = begin_cell().store_uint(0x10, 6) ;; non-bounce - we dont need answer from wallet
                        .store_slice(wallet)
                        .store_grams(amount)
                        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                        .store_uint(op:destruct(), 32) ;; request op
                        .store_uint(cur_lt(), 64); ;; query_id
  send_raw_message(msg.end_cell(), 3);

  ;; отправляем остальные деньги на адрес смарта, который получает прибыль и уничтожаем этот смарт контракт
  forward_funds(beneficiary, true, op:destruct());
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
  var (wallet, beneficiary, amount, period, start_time, timeout, last_payment_time, last_request_time, failed_attempts, subscription_id) = load_storage();
  var cs = in_msg_cell.begin_parse();
  var flags = cs~load_uint(4);
  slice s_addr = cs~load_msg_addr();

  if (slice_data_equal?(s_addr, beneficiary)) {
    int op = in_msg~load_uint(32);
    if (op == op:destruct()) {
        ;; удаляем подписку, если сообщение с op==destruct от смарта, который предоставляет услугу
        return self_destruct(wallet, beneficiary);
    }
    ;; иначе просто отправляем ему накопленные средства
    return forward_funds(beneficiary, false, op:fallback());
  }
  if (~ slice_data_equal?(s_addr, wallet)) {
    ;; просто пришел пинг от любого смарта на снятие средст и отправку их на смарт предоставляющий услугу
    return forward_funds(beneficiary, false, op:fallback());
  }
  ;; далее мы знаем, что транзакция была отправлена wallet (подписчиком)
  if (in_msg.slice_bits() < 32) {
    ;; просто пришел пинг на снятие средст и отправку их на смарт предоставляющий услугу
    return forward_funds(beneficiary, false, op:fallback());
  }
  int op = in_msg~load_uint(32);

  if (op == (op:payment_request() | 0x80000000)) {
    ;; пришла оплата от кошелька
    int last_timeslot = (last_payment_time - start_time) / period;
    int cur_timeslot = (now() - start_time) / period;
    throw_if(49, last_timeslot >= cur_timeslot); ;; если подписка была оплачена, не даем оплатить повторно
    (int from_wc, _) = s_addr.parse_std_addr();

    if (msg_value >= amount - short_msg_fwd_fee(from_wc) ) {
      ;; если денег из сообщения хватает на оплату подписки и отправку пришедшего платежа на сервис, то принимаем платеж
      last_payment_time = now();
      failed_attempts = 0;
      forward_funds(beneficiary, false, op:subscription());
    }

    return save_storage(wallet, beneficiary, amount, period, start_time, timeout, last_payment_time, last_request_time, failed_attempts, subscription_id);
  }
  if (op == op:destruct()) { ;; отписываемся и уничтожаем подписку
    return forward_funds(beneficiary, true, op:destruct());
  }
}

() recv_external(slice in_msg) impure {
  var (wallet, beneficiary, amount, period, start_time, timeout, last_payment_time, last_request_time, failed_attempts, subscription_id) = load_storage();
  int last_timeslot = (last_payment_time - start_time) / period;
  int cur_timeslot = (now() - start_time) / period;
  ;; проверяем, что оплата нужна и что прошло достаточно времени с попытки последней оплаты
  throw_unless(30, (cur_timeslot > last_timeslot) & (last_request_time + timeout < now()));
  accept_message();
  if (failed_attempts >= max_failed_attempts()) { ;; удаляем, если количество попыток оплаты превысило допустимый
    self_destruct(wallet, beneficiary);
  } else {
    request_payment(wallet, amount); ;; иначе запрашиваем оплату за подписку
    failed_attempts += 1;
  }
  save_storage(wallet, beneficiary, amount, period, start_time, timeout, last_payment_time, now(), failed_attempts, subscription_id);
}

;; Get methods

([int, int], [int, int], int, int, int, int, int, int, int, int) get_subscription_data() method_id {
  var (wallet, beneficiary, amount, period, start_time, timeout, last_payment_time, last_request_time, failed_attempts, subscription_id) = load_storage();
  return (pair(parse_std_addr(wallet)), pair(parse_std_addr(beneficiary)),
          amount, period, start_time, timeout, last_payment_time, last_request_time, failed_attempts, subscription_id);
}